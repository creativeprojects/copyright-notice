package main

import (
	"errors"
	"fmt"
	"io/ioutil"
	"strconv"
	"strings"
	"time"

	"github.com/creativeprojects/clog"
	"github.com/vbauerster/mpb/v5"
	"github.com/vbauerster/mpb/v5/decor"
)

func checkForCopyrightNotices(copyrightNotice []byte) {
	start := time.Now()
	progress := mpb.New()
	bar := progress.AddBar(int64(fileQueue.Len()),
		mpb.PrependDecorators(decor.CountersNoUnit("files: %d / %d", decor.WC{})),
		mpb.BarRemoveOnComplete())

	file := NewFile(int(maxSize))

	for e := fileQueue.Front(); e != nil; e = e.Next() {
		bar.Increment()
		fileEntry := e.Value.(FileEntry)
		checkForCopyrightNoticeInFile(file, fileEntry, copyrightNotice)
	}
	progress.Wait()
	clog.Infof("finished analyzing files in %s", time.Since(start))
}

func checkForCopyrightNoticeInFile(file *File, fileEntry FileEntry, copyrightNotice []byte) {
	var err error

	err = file.Read(fileEntry.Name, fileEntry.Size)
	if err != nil {
		progress(fileEntry.Name, fileStatusError, err)
		return
	}
	if !file.IsReady() {
		progress(fileEntry.Name, fileStatusError, errors.New("file reader hasn't finished reading"))
		return
	}
	buffer := file.Bytes()
	ignore := autoGenerated.FindIndex(buffer)
	if ignore != nil {
		progress(fileEntry.Name, fileStatusIgnore, nil)
		return
	}
	// Use the regexp to detect if the copyright header is present
	found := detectOtherHeader.FindIndex(buffer)
	if found != nil {
		// Header was found, now we need to check if the year is right
		yearMatch := detectOwnHeader.FindSubmatch(buffer)
		// yearMatch: The first []byte is the whole match, then each one after are from the capturing parenthesis:
		// so the next one will be the string before the year, then the year, then the rest of the line
		if yearMatch == nil || len(yearMatch) <= 3 {
			// Really, we should have found a year
			progress(fileEntry.Name, fileStatusError, fmt.Errorf("a year was not found in the copyright notice"))
			return
		}
		if len(yearMatch) > 4 {
			// So there's more than one copyright notice in the file?
			// Convert [][]byte to string for the error message
			displayYearRange := make([]string, len(yearMatch))
			for index, element := range yearMatch {
				displayYearRange[index] = "\"" + string(element) + "\""
			}
			progress(fileEntry.Name, fileStatusError, fmt.Errorf("more than one year was found in the copyright notice: [ %v ]", strings.Join(displayYearRange, ", ")))
			return
		}
		year, err := strconv.Atoi(string(yearMatch[2]))
		if err != nil {
			// not and integer?
			progress(fileEntry.Name, fileStatusError, fmt.Errorf("wrong format of year was found in the copyright notice"))
			return
		}
		currentYear := time.Now().Year()
		if year < currentYear {
			// We need to update the existing copyright header
			if !flags.dryRun {
				buffer = detectOwnHeader.ReplaceAll(buffer, []byte("${1}"+strconv.Itoa(currentYear)+"${3}"))
				err = ioutil.WriteFile(fileEntry.Name, buffer, 0666)
				if err != nil {
					progress(fileEntry.Name, fileStatusError, err)
					return
				}
			}
			progress(fileEntry.Name, fileStatusCopyrightYearNeedsUpdated, nil)
			return
		}
		progress(fileEntry.Name, fileStatusWithCopyright, nil)
	} else {
		// We need to add the new copyright header
		if !flags.dryRun {
			err = addCopyrightNotice(fileEntry.Name, copyrightNotice, buffer)
			if err != nil {
				progress(fileEntry.Name, fileStatusError, err)
				return
			}
		}
		progress(fileEntry.Name, fileStatusNoCopyright, nil)
	}
}
